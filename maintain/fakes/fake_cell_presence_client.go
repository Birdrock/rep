// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/rep/maintain"
	"github.com/tedsuo/ifrit"
)

type FakeCellPresenceClient struct {
	NewCellPresenceRunnerStub        func(logger lager.Logger, cellPresence *models.CellPresence, retryInterval, lockTTL time.Duration) ifrit.Runner
	newCellPresenceRunnerMutex       sync.RWMutex
	newCellPresenceRunnerArgsForCall []struct {
		logger        lager.Logger
		cellPresence  *models.CellPresence
		retryInterval time.Duration
		lockTTL       time.Duration
	}
	newCellPresenceRunnerReturns struct {
		result1 ifrit.Runner
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunner(logger lager.Logger, cellPresence *models.CellPresence, retryInterval time.Duration, lockTTL time.Duration) ifrit.Runner {
	fake.newCellPresenceRunnerMutex.Lock()
	fake.newCellPresenceRunnerArgsForCall = append(fake.newCellPresenceRunnerArgsForCall, struct {
		logger        lager.Logger
		cellPresence  *models.CellPresence
		retryInterval time.Duration
		lockTTL       time.Duration
	}{logger, cellPresence, retryInterval, lockTTL})
	fake.recordInvocation("NewCellPresenceRunner", []interface{}{logger, cellPresence, retryInterval, lockTTL})
	fake.newCellPresenceRunnerMutex.Unlock()
	if fake.NewCellPresenceRunnerStub != nil {
		return fake.NewCellPresenceRunnerStub(logger, cellPresence, retryInterval, lockTTL)
	} else {
		return fake.newCellPresenceRunnerReturns.result1
	}
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerCallCount() int {
	fake.newCellPresenceRunnerMutex.RLock()
	defer fake.newCellPresenceRunnerMutex.RUnlock()
	return len(fake.newCellPresenceRunnerArgsForCall)
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerArgsForCall(i int) (lager.Logger, *models.CellPresence, time.Duration, time.Duration) {
	fake.newCellPresenceRunnerMutex.RLock()
	defer fake.newCellPresenceRunnerMutex.RUnlock()
	return fake.newCellPresenceRunnerArgsForCall[i].logger, fake.newCellPresenceRunnerArgsForCall[i].cellPresence, fake.newCellPresenceRunnerArgsForCall[i].retryInterval, fake.newCellPresenceRunnerArgsForCall[i].lockTTL
}

func (fake *FakeCellPresenceClient) NewCellPresenceRunnerReturns(result1 ifrit.Runner) {
	fake.NewCellPresenceRunnerStub = nil
	fake.newCellPresenceRunnerReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeCellPresenceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newCellPresenceRunnerMutex.RLock()
	defer fake.newCellPresenceRunnerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCellPresenceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ maintain.CellPresenceClient = new(FakeCellPresenceClient)
